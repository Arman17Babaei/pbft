syntax = "proto3";

package pbft;
option go_package = ".";

import "general.proto";

// ==================== Paxos Election Messages ====================

message PaxosPrepareRequest {
    int64 term = 1;
    int64 proposal_id = 2;
    string proposer_id = 3;
    int64 view_id = 4;
    int64 last_accepted_proposal_id = 5;
    string last_accepted_value = 6;
}

message PaxosPrepareResponse {
    int64 term = 1;
    bool accepted = 2;
    int64 accepted_proposal_id = 3;
    string accepted_value = 4;
    string voter_id = 5;
}

message PaxosAcceptRequest {
    int64 term = 1;
    int64 proposal_id = 2;
    string proposer_id = 3;
    int64 view_id = 4;
    string leader_id = 5;
}

message PaxosAcceptResponse {
    int64 term = 1;
    bool accepted = 2;
    string voter_id = 3;
}

message PaxosLearnRequest {
    int64 term = 1;
    int64 proposal_id = 2;
    string proposer_id = 3;
    int64 view_id = 4;
    string leader_id = 5;
}

message PaxosLearnResponse {
    int64 term = 1;
    bool learned = 2;
    string learner_id = 3;
}

// ==================== Raft Election Messages ====================

message RaftRequestVoteRequest {
    int64 term = 1;
    string candidate_id = 2;
    int64 last_log_index = 3;
    int64 last_log_term = 4;
    int64 view_id = 5;
}

message RaftRequestVoteResponse {
    int64 term = 1;
    bool vote_granted = 2;
    string voter_id = 3;
}

message RaftAppendEntriesRequest {
    int64 term = 1;
    string leader_id = 2;
    int64 prev_log_index = 3;
    int64 prev_log_term = 4;
    repeated LogEntry entries = 5;
    int64 leader_commit = 6;
    int64 view_id = 7;
}

message RaftAppendEntriesResponse {
    int64 term = 1;
    bool success = 2;
    string follower_id = 3;
}

message LogEntry {
    int64 term = 1;
    int64 index = 2;
    string command = 3;
}

// ==================== Common Election Messages ====================

message ElectionStatusRequest {
    string node_id = 1;
    int64 view_id = 2;
}

message ElectionStatusResponse {
    int64 current_term = 1;
    string current_leader = 2;
    string node_state = 3;
    int64 view_id = 4;
    int64 last_heartbeat = 5;
}

// ==================== gRPC Service Definition ====================

service Election {
    // Paxos related
    rpc PaxosPrepare(PaxosPrepareRequest) returns (PaxosPrepareResponse);
    rpc PaxosAccept(PaxosAcceptRequest) returns (PaxosAcceptResponse);
    rpc PaxosLearn(PaxosLearnRequest) returns (PaxosLearnResponse);
    
    // Raft related
    rpc RaftRequestVote(RaftRequestVoteRequest) returns (RaftRequestVoteResponse);
    rpc RaftAppendEntries(RaftAppendEntriesRequest) returns (RaftAppendEntriesResponse);
    
    // Common services
    rpc GetElectionStatus(ElectionStatusRequest) returns (ElectionStatusResponse);
    rpc Enable(Empty) returns (Empty);
    rpc Disable(Empty) returns (Empty);
}